# This file was generated based on ".graphqlconfig". Do not edit manually.

schema {
    query: Query
    mutation: Mutation
}

union Morph = ComponentImageMainImage | Gender | GenderAggregator | GenderConnection | GenderConnectionCreated_at | GenderConnectionCreated_by | GenderConnectionId | GenderConnectionSex | GenderConnectionUpdated_at | GenderConnectionUpdated_by | GenderGroupBy | Product | ProductAggregator | ProductConnection | ProductConnectionCreated_at | ProductConnectionCreated_by | ProductConnectionGenders | ProductConnectionId | ProductConnectionTitle | ProductConnectionUpdated_at | ProductConnectionUpdated_by | ProductGroupBy | Slides | SlidesAggregator | SlidesConnection | SlidesConnectionCreated_at | SlidesConnectionCreated_by | SlidesConnectionDescription | SlidesConnectionId | SlidesConnectionMainImg | SlidesConnectionTitle | SlidesConnectionUpdated_at | SlidesConnectionUpdated_by | SlidesGroupBy | UploadFile | UploadFileAggregator | UploadFileAggregatorAvg | UploadFileAggregatorMax | UploadFileAggregatorMin | UploadFileAggregatorSum | UploadFileConnection | UploadFileConnectionAlternativeText | UploadFileConnectionCaption | UploadFileConnectionCreated_at | UploadFileConnectionCreated_by | UploadFileConnectionExt | UploadFileConnectionFormats | UploadFileConnectionHash | UploadFileConnectionHeight | UploadFileConnectionId | UploadFileConnectionMime | UploadFileConnectionName | UploadFileConnectionPreviewUrl | UploadFileConnectionProvider | UploadFileConnectionProvider_metadata | UploadFileConnectionSize | UploadFileConnectionUpdated_at | UploadFileConnectionUpdated_by | UploadFileConnectionUrl | UploadFileConnectionWidth | UploadFileGroupBy | UserPermissionsPasswordPayload | UsersPermissionsLoginPayload | UsersPermissionsMe | UsersPermissionsMeRole | UsersPermissionsPermission | UsersPermissionsRole | UsersPermissionsRoleAggregator | UsersPermissionsRoleConnection | UsersPermissionsRoleConnectionCreated_by | UsersPermissionsRoleConnectionDescription | UsersPermissionsRoleConnectionId | UsersPermissionsRoleConnectionName | UsersPermissionsRoleConnectionType | UsersPermissionsRoleConnectionUpdated_by | UsersPermissionsRoleGroupBy | UsersPermissionsUser | UsersPermissionsUserAggregator | UsersPermissionsUserConnection | UsersPermissionsUserConnectionBlocked | UsersPermissionsUserConnectionConfirmed | UsersPermissionsUserConnectionCreated_at | UsersPermissionsUserConnectionCreated_by | UsersPermissionsUserConnectionEmail | UsersPermissionsUserConnectionId | UsersPermissionsUserConnectionProvider | UsersPermissionsUserConnectionRole | UsersPermissionsUserConnectionUpdated_at | UsersPermissionsUserConnectionUpdated_by | UsersPermissionsUserConnectionUsername | UsersPermissionsUserGroupBy | createGenderPayload | createProductPayload | createRolePayload | createSlidePayload | createUserPayload | deleteGenderPayload | deleteProductPayload | deleteRolePayload | deleteSlidePayload | deleteUserPayload | updateGenderPayload | updateProductPayload | updateRolePayload | updateSlidePayload | updateUserPayload

type AdminUser {
    id: ID!
    username: String
}

type ComponentImageMainImage {
    alt: String
    id: ID!
    image: UploadFile
    moving: Int
}

type Gender {
    created_at: DateTime!
    created_by: AdminUser
    id: ID!
    products(limit: Int, sort: String, start: Int, where: JSON): [Product]
    sex: String
    updated_at: DateTime!
    updated_by: AdminUser
}

type GenderAggregator {
    count: Int
    totalCount: Int
}

type GenderConnection {
    aggregate: GenderAggregator
    groupBy: GenderGroupBy
    values: [Gender]
}

type GenderConnectionCreated_at {
    connection: GenderConnection
    key: DateTime
}

type GenderConnectionCreated_by {
    connection: GenderConnection
    key: ID
}

type GenderConnectionId {
    connection: GenderConnection
    key: ID
}

type GenderConnectionSex {
    connection: GenderConnection
    key: String
}

type GenderConnectionUpdated_at {
    connection: GenderConnection
    key: DateTime
}

type GenderConnectionUpdated_by {
    connection: GenderConnection
    key: ID
}

type GenderGroupBy {
    created_at: [GenderConnectionCreated_at]
    created_by: [GenderConnectionCreated_by]
    id: [GenderConnectionId]
    sex: [GenderConnectionSex]
    updated_at: [GenderConnectionUpdated_at]
    updated_by: [GenderConnectionUpdated_by]
}

type Mutation {
    createGender(input: createGenderInput): createGenderPayload
    createProduct(input: createProductInput): createProductPayload
    "Create a new role"
    createRole(input: createRoleInput): createRolePayload
    createSlide(input: createSlideInput): createSlidePayload
    "Create a new user"
    createUser(input: createUserInput): createUserPayload
    deleteGender(input: deleteGenderInput): deleteGenderPayload
    deleteProduct(input: deleteProductInput): deleteProductPayload
    "Delete an existing role"
    deleteRole(input: deleteRoleInput): deleteRolePayload
    deleteSlide(input: deleteSlideInput): deleteSlidePayload
    "Delete an existing user"
    deleteUser(input: deleteUserInput): deleteUserPayload
    emailConfirmation(confirmation: String!): UsersPermissionsLoginPayload
    forgotPassword(email: String!): UserPermissionsPasswordPayload
    login(input: UsersPermissionsLoginInput!): UsersPermissionsLoginPayload!
    multipleUpload(field: String, files: [Upload]!, ref: String, refId: ID, source: String): [UploadFile]!
    register(input: UsersPermissionsRegisterInput!): UsersPermissionsLoginPayload!
    resetPassword(code: String!, password: String!, passwordConfirmation: String!): UsersPermissionsLoginPayload
    updateFileInfo(id: ID!, info: FileInfoInput!): UploadFile!
    updateGender(input: updateGenderInput): updateGenderPayload
    updateProduct(input: updateProductInput): updateProductPayload
    "Update an existing role"
    updateRole(input: updateRoleInput): updateRolePayload
    updateSlide(input: updateSlideInput): updateSlidePayload
    "Update an existing user"
    updateUser(input: updateUserInput): updateUserPayload
    upload(field: String, file: Upload!, ref: String, refId: ID, source: String): UploadFile!
}

type Product {
    created_at: DateTime!
    created_by: AdminUser
    genders: Gender
    id: ID!
    title: String
    updated_at: DateTime!
    updated_by: AdminUser
}

type ProductAggregator {
    count: Int
    totalCount: Int
}

type ProductConnection {
    aggregate: ProductAggregator
    groupBy: ProductGroupBy
    values: [Product]
}

type ProductConnectionCreated_at {
    connection: ProductConnection
    key: DateTime
}

type ProductConnectionCreated_by {
    connection: ProductConnection
    key: ID
}

type ProductConnectionGenders {
    connection: ProductConnection
    key: ID
}

type ProductConnectionId {
    connection: ProductConnection
    key: ID
}

type ProductConnectionTitle {
    connection: ProductConnection
    key: String
}

type ProductConnectionUpdated_at {
    connection: ProductConnection
    key: DateTime
}

type ProductConnectionUpdated_by {
    connection: ProductConnection
    key: ID
}

type ProductGroupBy {
    created_at: [ProductConnectionCreated_at]
    created_by: [ProductConnectionCreated_by]
    genders: [ProductConnectionGenders]
    id: [ProductConnectionId]
    title: [ProductConnectionTitle]
    updated_at: [ProductConnectionUpdated_at]
    updated_by: [ProductConnectionUpdated_by]
}

type Query {
    files(limit: Int, sort: String, start: Int, where: JSON): [UploadFile]
    filesConnection(limit: Int, sort: String, start: Int, where: JSON): UploadFileConnection
    gender(id: ID!): Gender
    genders(limit: Int, sort: String, start: Int, where: JSON): [Gender]
    gendersConnection(limit: Int, sort: String, start: Int, where: JSON): GenderConnection
    me: UsersPermissionsMe
    product(id: ID!): Product
    products(limit: Int, sort: String, start: Int, where: JSON): [Product]
    productsConnection(limit: Int, sort: String, start: Int, where: JSON): ProductConnection
    role(id: ID!): UsersPermissionsRole
    "Retrieve all the existing roles. You can't apply filters on this query."
    roles(limit: Int, sort: String, start: Int, where: JSON): [UsersPermissionsRole]
    rolesConnection(limit: Int, sort: String, start: Int, where: JSON): UsersPermissionsRoleConnection
    slide(id: ID!): Slides
    slides(limit: Int, sort: String, start: Int, where: JSON): [Slides]
    slidesConnection(limit: Int, sort: String, start: Int, where: JSON): SlidesConnection
    user(id: ID!): UsersPermissionsUser
    users(limit: Int, sort: String, start: Int, where: JSON): [UsersPermissionsUser]
    usersConnection(limit: Int, sort: String, start: Int, where: JSON): UsersPermissionsUserConnection
}

type Slides {
    created_at: DateTime!
    created_by: AdminUser
    description: String
    id: ID!
    mainImg: ComponentImageMainImage
    productImage(limit: Int, sort: String, start: Int, where: JSON): [UploadFile]
    title: String
    updated_at: DateTime!
    updated_by: AdminUser
}

type SlidesAggregator {
    count: Int
    totalCount: Int
}

type SlidesConnection {
    aggregate: SlidesAggregator
    groupBy: SlidesGroupBy
    values: [Slides]
}

type SlidesConnectionCreated_at {
    connection: SlidesConnection
    key: DateTime
}

type SlidesConnectionCreated_by {
    connection: SlidesConnection
    key: ID
}

type SlidesConnectionDescription {
    connection: SlidesConnection
    key: String
}

type SlidesConnectionId {
    connection: SlidesConnection
    key: ID
}

type SlidesConnectionMainImg {
    connection: SlidesConnection
    key: ID
}

type SlidesConnectionTitle {
    connection: SlidesConnection
    key: String
}

type SlidesConnectionUpdated_at {
    connection: SlidesConnection
    key: DateTime
}

type SlidesConnectionUpdated_by {
    connection: SlidesConnection
    key: ID
}

type SlidesGroupBy {
    created_at: [SlidesConnectionCreated_at]
    created_by: [SlidesConnectionCreated_by]
    description: [SlidesConnectionDescription]
    id: [SlidesConnectionId]
    mainImg: [SlidesConnectionMainImg]
    title: [SlidesConnectionTitle]
    updated_at: [SlidesConnectionUpdated_at]
    updated_by: [SlidesConnectionUpdated_by]
}

type UploadFile {
    alternativeText: String
    caption: String
    created_at: DateTime!
    created_by: AdminUser
    ext: String
    formats: JSON
    hash: String!
    height: Int
    id: ID!
    mime: String!
    name: String!
    previewUrl: String
    provider: String!
    provider_metadata: JSON
    related(limit: Int, sort: String, start: Int, where: JSON): [Morph]
    size: Float!
    updated_at: DateTime!
    updated_by: AdminUser
    url: String!
    width: Int
}

type UploadFileAggregator {
    avg: UploadFileAggregatorAvg
    count: Int
    max: UploadFileAggregatorMax
    min: UploadFileAggregatorMin
    sum: UploadFileAggregatorSum
    totalCount: Int
}

type UploadFileAggregatorAvg {
    height: Float
    size: Float
    width: Float
}

type UploadFileAggregatorMax {
    height: Float
    size: Float
    width: Float
}

type UploadFileAggregatorMin {
    height: Float
    size: Float
    width: Float
}

type UploadFileAggregatorSum {
    height: Float
    size: Float
    width: Float
}

type UploadFileConnection {
    aggregate: UploadFileAggregator
    groupBy: UploadFileGroupBy
    values: [UploadFile]
}

type UploadFileConnectionAlternativeText {
    connection: UploadFileConnection
    key: String
}

type UploadFileConnectionCaption {
    connection: UploadFileConnection
    key: String
}

type UploadFileConnectionCreated_at {
    connection: UploadFileConnection
    key: DateTime
}

type UploadFileConnectionCreated_by {
    connection: UploadFileConnection
    key: ID
}

type UploadFileConnectionExt {
    connection: UploadFileConnection
    key: String
}

type UploadFileConnectionFormats {
    connection: UploadFileConnection
    key: JSON
}

type UploadFileConnectionHash {
    connection: UploadFileConnection
    key: String
}

type UploadFileConnectionHeight {
    connection: UploadFileConnection
    key: Int
}

type UploadFileConnectionId {
    connection: UploadFileConnection
    key: ID
}

type UploadFileConnectionMime {
    connection: UploadFileConnection
    key: String
}

type UploadFileConnectionName {
    connection: UploadFileConnection
    key: String
}

type UploadFileConnectionPreviewUrl {
    connection: UploadFileConnection
    key: String
}

type UploadFileConnectionProvider {
    connection: UploadFileConnection
    key: String
}

type UploadFileConnectionProvider_metadata {
    connection: UploadFileConnection
    key: JSON
}

type UploadFileConnectionSize {
    connection: UploadFileConnection
    key: Float
}

type UploadFileConnectionUpdated_at {
    connection: UploadFileConnection
    key: DateTime
}

type UploadFileConnectionUpdated_by {
    connection: UploadFileConnection
    key: ID
}

type UploadFileConnectionUrl {
    connection: UploadFileConnection
    key: String
}

type UploadFileConnectionWidth {
    connection: UploadFileConnection
    key: Int
}

type UploadFileGroupBy {
    alternativeText: [UploadFileConnectionAlternativeText]
    caption: [UploadFileConnectionCaption]
    created_at: [UploadFileConnectionCreated_at]
    created_by: [UploadFileConnectionCreated_by]
    ext: [UploadFileConnectionExt]
    formats: [UploadFileConnectionFormats]
    hash: [UploadFileConnectionHash]
    height: [UploadFileConnectionHeight]
    id: [UploadFileConnectionId]
    mime: [UploadFileConnectionMime]
    name: [UploadFileConnectionName]
    previewUrl: [UploadFileConnectionPreviewUrl]
    provider: [UploadFileConnectionProvider]
    provider_metadata: [UploadFileConnectionProvider_metadata]
    size: [UploadFileConnectionSize]
    updated_at: [UploadFileConnectionUpdated_at]
    updated_by: [UploadFileConnectionUpdated_by]
    url: [UploadFileConnectionUrl]
    width: [UploadFileConnectionWidth]
}

type UserPermissionsPasswordPayload {
    ok: Boolean!
}

type UsersPermissionsLoginPayload {
    jwt: String
    user: UsersPermissionsMe!
}

type UsersPermissionsMe {
    blocked: Boolean
    confirmed: Boolean
    email: String!
    id: ID!
    role: UsersPermissionsMeRole
    username: String!
}

type UsersPermissionsMeRole {
    description: String
    id: ID!
    name: String!
    type: String
}

type UsersPermissionsPermission {
    action: String!
    controller: String!
    created_by: AdminUser
    enabled: Boolean!
    id: ID!
    policy: String
    role: UsersPermissionsRole
    type: String!
    updated_by: AdminUser
}

type UsersPermissionsRole {
    created_by: AdminUser
    description: String
    id: ID!
    name: String!
    permissions(limit: Int, sort: String, start: Int, where: JSON): [UsersPermissionsPermission]
    type: String
    updated_by: AdminUser
    users(limit: Int, sort: String, start: Int, where: JSON): [UsersPermissionsUser]
}

type UsersPermissionsRoleAggregator {
    count: Int
    totalCount: Int
}

type UsersPermissionsRoleConnection {
    aggregate: UsersPermissionsRoleAggregator
    groupBy: UsersPermissionsRoleGroupBy
    values: [UsersPermissionsRole]
}

type UsersPermissionsRoleConnectionCreated_by {
    connection: UsersPermissionsRoleConnection
    key: ID
}

type UsersPermissionsRoleConnectionDescription {
    connection: UsersPermissionsRoleConnection
    key: String
}

type UsersPermissionsRoleConnectionId {
    connection: UsersPermissionsRoleConnection
    key: ID
}

type UsersPermissionsRoleConnectionName {
    connection: UsersPermissionsRoleConnection
    key: String
}

type UsersPermissionsRoleConnectionType {
    connection: UsersPermissionsRoleConnection
    key: String
}

type UsersPermissionsRoleConnectionUpdated_by {
    connection: UsersPermissionsRoleConnection
    key: ID
}

type UsersPermissionsRoleGroupBy {
    created_by: [UsersPermissionsRoleConnectionCreated_by]
    description: [UsersPermissionsRoleConnectionDescription]
    id: [UsersPermissionsRoleConnectionId]
    name: [UsersPermissionsRoleConnectionName]
    type: [UsersPermissionsRoleConnectionType]
    updated_by: [UsersPermissionsRoleConnectionUpdated_by]
}

type UsersPermissionsUser {
    blocked: Boolean
    confirmed: Boolean
    created_at: DateTime!
    created_by: AdminUser
    email: String!
    id: ID!
    provider: String
    role: UsersPermissionsRole
    updated_at: DateTime!
    updated_by: AdminUser
    username: String!
}

type UsersPermissionsUserAggregator {
    count: Int
    totalCount: Int
}

type UsersPermissionsUserConnection {
    aggregate: UsersPermissionsUserAggregator
    groupBy: UsersPermissionsUserGroupBy
    values: [UsersPermissionsUser]
}

type UsersPermissionsUserConnectionBlocked {
    connection: UsersPermissionsUserConnection
    key: Boolean
}

type UsersPermissionsUserConnectionConfirmed {
    connection: UsersPermissionsUserConnection
    key: Boolean
}

type UsersPermissionsUserConnectionCreated_at {
    connection: UsersPermissionsUserConnection
    key: DateTime
}

type UsersPermissionsUserConnectionCreated_by {
    connection: UsersPermissionsUserConnection
    key: ID
}

type UsersPermissionsUserConnectionEmail {
    connection: UsersPermissionsUserConnection
    key: String
}

type UsersPermissionsUserConnectionId {
    connection: UsersPermissionsUserConnection
    key: ID
}

type UsersPermissionsUserConnectionProvider {
    connection: UsersPermissionsUserConnection
    key: String
}

type UsersPermissionsUserConnectionRole {
    connection: UsersPermissionsUserConnection
    key: ID
}

type UsersPermissionsUserConnectionUpdated_at {
    connection: UsersPermissionsUserConnection
    key: DateTime
}

type UsersPermissionsUserConnectionUpdated_by {
    connection: UsersPermissionsUserConnection
    key: ID
}

type UsersPermissionsUserConnectionUsername {
    connection: UsersPermissionsUserConnection
    key: String
}

type UsersPermissionsUserGroupBy {
    blocked: [UsersPermissionsUserConnectionBlocked]
    confirmed: [UsersPermissionsUserConnectionConfirmed]
    created_at: [UsersPermissionsUserConnectionCreated_at]
    created_by: [UsersPermissionsUserConnectionCreated_by]
    email: [UsersPermissionsUserConnectionEmail]
    id: [UsersPermissionsUserConnectionId]
    provider: [UsersPermissionsUserConnectionProvider]
    role: [UsersPermissionsUserConnectionRole]
    updated_at: [UsersPermissionsUserConnectionUpdated_at]
    updated_by: [UsersPermissionsUserConnectionUpdated_by]
    username: [UsersPermissionsUserConnectionUsername]
}

type createGenderPayload {
    gender: Gender
}

type createProductPayload {
    product: Product
}

type createRolePayload {
    role: UsersPermissionsRole
}

type createSlidePayload {
    slide: Slides
}

type createUserPayload {
    user: UsersPermissionsUser
}

type deleteGenderPayload {
    gender: Gender
}

type deleteProductPayload {
    product: Product
}

type deleteRolePayload {
    role: UsersPermissionsRole
}

type deleteSlidePayload {
    slide: Slides
}

type deleteUserPayload {
    user: UsersPermissionsUser
}

type updateGenderPayload {
    gender: Gender
}

type updateProductPayload {
    product: Product
}

type updateRolePayload {
    role: UsersPermissionsRole
}

type updateSlidePayload {
    slide: Slides
}

type updateUserPayload {
    user: UsersPermissionsUser
}

enum CacheControlScope {
    PRIVATE
    PUBLIC
}

input ComponentImageMainImageInput {
    alt: String
    image: ID
    moving: Int
}

input FileInfoInput {
    alternativeText: String
    caption: String
    name: String
}

input FileInput {
    alternativeText: String
    caption: String
    created_by: ID
    ext: String
    formats: JSON
    hash: String!
    height: Int
    mime: String!
    name: String!
    previewUrl: String
    provider: String!
    provider_metadata: JSON
    related: [ID]
    size: Float!
    updated_by: ID
    url: String!
    width: Int
}

input GenderInput {
    created_by: ID
    products: [ID]
    sex: String
    updated_by: ID
}

input InputID {
    id: ID!
}

input ProductInput {
    created_by: ID
    genders: ID
    title: String
    updated_by: ID
}

input RoleInput {
    created_by: ID
    description: String
    name: String!
    permissions: [ID]
    type: String
    updated_by: ID
    users: [ID]
}

input SlideInput {
    created_by: ID
    description: String
    mainImg: ComponentImageMainImageInput
    productImage: [ID]
    title: String
    updated_by: ID
}

input UserInput {
    blocked: Boolean
    confirmed: Boolean
    created_by: ID
    email: String!
    password: String
    provider: String
    resetPasswordToken: String
    role: ID
    updated_by: ID
    username: String!
}

input UsersPermissionsLoginInput {
    identifier: String!
    password: String!
    provider: String = "local"
}

input UsersPermissionsRegisterInput {
    email: String!
    password: String!
    username: String!
}

input createGenderInput {
    data: GenderInput
}

input createProductInput {
    data: ProductInput
}

input createRoleInput {
    data: RoleInput
}

input createSlideInput {
    data: SlideInput
}

input createUserInput {
    data: UserInput
}

input deleteGenderInput {
    where: InputID
}

input deleteProductInput {
    where: InputID
}

input deleteRoleInput {
    where: InputID
}

input deleteSlideInput {
    where: InputID
}

input deleteUserInput {
    where: InputID
}

input editComponentImageMainImageInput {
    alt: String
    id: ID
    image: ID
    moving: Int
}

input editFileInput {
    alternativeText: String
    caption: String
    created_by: ID
    ext: String
    formats: JSON
    hash: String
    height: Int
    mime: String
    name: String
    previewUrl: String
    provider: String
    provider_metadata: JSON
    related: [ID]
    size: Float
    updated_by: ID
    url: String
    width: Int
}

input editGenderInput {
    created_by: ID
    products: [ID]
    sex: String
    updated_by: ID
}

input editProductInput {
    created_by: ID
    genders: ID
    title: String
    updated_by: ID
}

input editRoleInput {
    created_by: ID
    description: String
    name: String
    permissions: [ID]
    type: String
    updated_by: ID
    users: [ID]
}

input editSlideInput {
    created_by: ID
    description: String
    mainImg: editComponentImageMainImageInput
    productImage: [ID]
    title: String
    updated_by: ID
}

input editUserInput {
    blocked: Boolean
    confirmed: Boolean
    created_by: ID
    email: String
    password: String
    provider: String
    resetPasswordToken: String
    role: ID
    updated_by: ID
    username: String
}

input updateGenderInput {
    data: editGenderInput
    where: InputID
}

input updateProductInput {
    data: editProductInput
    where: InputID
}

input updateRoleInput {
    data: editRoleInput
    where: InputID
}

input updateSlideInput {
    data: editSlideInput
    where: InputID
}

input updateUserInput {
    data: editUserInput
    where: InputID
}


"A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the `date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar."
scalar DateTime

"The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf)."
scalar JSON

"The `Upload` scalar type represents a file upload."
scalar Upload

"A time string with format: HH:mm:ss.SSS"
scalar Time

"A date string, such as 2007-12-03, compliant with the `full-date` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar."
scalar Date

"The `Long` scalar type represents 52-bit integers"
scalar Long